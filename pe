# Import the required module
Import-Module Registry

# Define the device paths and new names
$devicePaths = @("\\\\.\\VBoxMiniRdrDN", "\\\\.\\pipe\\VBoxMiniRdDN", "\\\\.\\VBoxTrayIPC", "\\\\.\\pipe\\VBoxTrayIPC")
$newNames = @("New Device Name 1", "New Device Name 2", "New Device Name 3", "New Device Name 4")

# Modify device names using registry keys
for ($i = 0; $i -lt $devicePaths.Length; $i++) {
    # Get the current device name
    $currentName = (Get-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Class\{4D36E96A-E325-11CE-BFC1-08002BE10318}\Device$i" -Name "FriendlyName").FriendlyName

    # Set the new device name
    Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Class\{4D36E96A-E325-11CE-BFC1-08002BE10318}\Device$i" -Name "FriendlyName" -Value $newNames[$i]

    # Display the updated device name
    Write-Host "Device '$currentName' renamed to '$newNames[$i]'"
}

ren "\\\\.\\VBoxMiniRdrDN" "VBoxMiniRdr DN"


# Script.ps1

# Definir los nombres de los archivos
$filesToManipulate = @("\\.\VBoxMiniRdrDN", "\\.\pipe\VBoxMiniRdDN", "\\.\VBoxTrayIPC", "\\.\invalid_path")

# Renombrar todos los archivos para que no sean accesibles
foreach ($file in $filesToManipulate) {
    Rename-Item $file "$file.bak" -ErrorAction SilentlyContinue
}

# Ejecutar el programa
.\TuPrograma.exe

# Restaurar los nombres de los archivos
foreach ($file in $filesToManipulate) {
    Rename-Item "$file.bak" $file -ErrorAction SilentlyContinue
}
